import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TrCurrencyPipe {
    transform(value, symbol = "", isCurrencyFront = false) {
        if (value == 0) {
            return "0,00 " + symbol;
        }
        let isValueNegative = false;
        if (value < 0) {
            isValueNegative = true;
            value *= -1;
        }
        let money = value.toString().split(".");
        let newMoney = "";
        let lira = money[0];
        let penny = "00";
        if (money.length > 1) {
            penny = money[1];
            if (penny.length == 1) {
                penny = penny + "0";
            }
            if (penny.length > 1) {
                penny = this.convertNumber(+penny).toString();
            }
        }
        let count = 0;
        for (let i = lira.length; i > 0; i--) {
            if (count == 3 && count < (lira.length)) {
                newMoney = lira[i - 1] + "." + newMoney;
                count = 1;
            }
            else {
                newMoney = lira[i - 1] + newMoney;
                count++;
            }
        }
        if (!isCurrencyFront)
            newMoney = `${newMoney},${penny} ${symbol}`;
        else
            newMoney = `${symbol}${newMoney},${penny}`;
        if (isValueNegative) {
            newMoney = "-" + newMoney;
        }
        return newMoney;
    }
    convertNumber(value) {
        const stringValue = value.toString();
        if (stringValue.length > 2) {
            const remainingValue = parseInt(stringValue.substr(2));
            if (remainingValue > 5) {
                return parseInt(stringValue.substr(0, 2)) + 1;
            }
            return parseInt(stringValue.substr(0, 2));
        }
        return value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: TrCurrencyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.0.2", ngImport: i0, type: TrCurrencyPipe, isStandalone: true, name: "trCurrency" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: TrCurrencyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'trCurrency',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHItY3VycmVuY3kucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL215LWxpYi9zcmMvbGliL3RyLWN1cnJlbmN5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxjQUFjO0lBRXpCLFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsRUFBRSxFQUFFLGtCQUEyQixLQUFLO1FBQzVFLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNkLE9BQU8sT0FBTyxHQUFHLE1BQU0sQ0FBQztTQUN6QjtRQUVELElBQUksZUFBZSxHQUFXLEtBQUssQ0FBQztRQUNwQyxJQUFHLEtBQUssR0FBRyxDQUFDLEVBQUM7WUFDWCxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNiO1FBRUQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDaEIsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtnQkFDckIsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUE7YUFDcEI7WUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQy9DO1NBQ0Y7UUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN2QyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFBO2dCQUNyQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ1g7aUJBQUk7Z0JBQ0gsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFBO2dCQUMvQixLQUFLLEVBQUUsQ0FBQzthQUNUO1NBQ0Y7UUFFRCxJQUFHLENBQUMsZUFBZTtZQUNqQixRQUFRLEdBQUcsR0FBRyxRQUFRLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDOztZQUU3QyxRQUFRLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBRTVDLElBQUcsZUFBZSxFQUFDO1lBQ2pCLFFBQVEsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFhO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsSUFBSSxjQUFjLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQztZQUNELE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OEdBNURVLGNBQWM7NEdBQWQsY0FBYzs7MkZBQWQsY0FBYztrQkFKMUIsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsWUFBWTtvQkFDbEIsVUFBVSxFQUFFLElBQUk7aUJBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICd0ckN1cnJlbmN5JyxcclxuICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUckN1cnJlbmN5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICB0cmFuc2Zvcm0odmFsdWU6IG51bWJlciwgc3ltYm9sOiBzdHJpbmcgPSBcIlwiLCBpc0N1cnJlbmN5RnJvbnQ6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XHJcbiAgICBpZiAodmFsdWUgPT0gMCkgeyAgICAgICAgICAgIFxyXG4gICAgICByZXR1cm4gXCIwLDAwIFwiICsgc3ltYm9sO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc1ZhbHVlTmVnYXRpdmU6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgaWYodmFsdWUgPCAwKXtcclxuICAgICAgaXNWYWx1ZU5lZ2F0aXZlID0gdHJ1ZTtcclxuICAgICAgdmFsdWUgKj0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1vbmV5ID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIi5cIilcclxuICAgIGxldCBuZXdNb25leSA9IFwiXCI7XHJcbiAgICBsZXQgbGlyYSA9IG1vbmV5WzBdO1xyXG4gICAgbGV0IHBlbm55ID0gXCIwMFwiO1xyXG4gICAgaWYgKG1vbmV5Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgcGVubnkgPSBtb25leVsxXVxyXG4gICAgICBpZiAocGVubnkubGVuZ3RoID09IDEpIHtcclxuICAgICAgICBwZW5ueSA9IHBlbm55ICsgXCIwXCJcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHBlbm55Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBwZW5ueSA9IHRoaXMuY29udmVydE51bWJlcigrcGVubnkpLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IGxpcmEubGVuZ3RoOyBpID4gMDsgaS0tKSB7ICAgICAgXHJcbiAgICAgIGlmIChjb3VudCA9PSAzICYmIGNvdW50IDwgKGxpcmEubGVuZ3RoKSkge1xyXG4gICAgICAgIG5ld01vbmV5ID0gbGlyYVtpLTFdICsgXCIuXCIgKyBuZXdNb25leSBcclxuICAgICAgICBjb3VudCA9IDE7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG5ld01vbmV5ID0gbGlyYVtpLTFdICsgbmV3TW9uZXlcclxuICAgICAgICBjb3VudCsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIWlzQ3VycmVuY3lGcm9udClcclxuICAgICAgbmV3TW9uZXkgPSBgJHtuZXdNb25leX0sJHtwZW5ueX0gJHtzeW1ib2x9YDtcclxuICAgIGVsc2UgIFxyXG4gICAgIG5ld01vbmV5ID0gYCR7c3ltYm9sfSR7bmV3TW9uZXl9LCR7cGVubnl9YDtcclxuXHJcbiAgICBpZihpc1ZhbHVlTmVnYXRpdmUpe1xyXG4gICAgICBuZXdNb25leSA9IFwiLVwiICsgbmV3TW9uZXk7XHJcbiAgICB9ICAgIFxyXG4gICAgcmV0dXJuIG5ld01vbmV5O1xyXG4gIH0gXHJcblxyXG4gIGNvbnZlcnROdW1iZXIodmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICBpZiAoc3RyaW5nVmFsdWUubGVuZ3RoID4gMikge1xyXG4gICAgICBjb25zdCByZW1haW5pbmdWYWx1ZSA9IHBhcnNlSW50KHN0cmluZ1ZhbHVlLnN1YnN0cigyKSk7XHJcbiAgICAgIGlmIChyZW1haW5pbmdWYWx1ZSA+IDUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nVmFsdWUuc3Vic3RyKDAsIDIpKSArIDE7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZ1ZhbHVlLnN1YnN0cigwLCAyKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=