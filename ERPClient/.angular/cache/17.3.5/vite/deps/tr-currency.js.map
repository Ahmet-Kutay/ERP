{
  "version": 3,
  "sources": ["../../../../../node_modules/tr-currency/fesm2022/tr-currency.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Pipe } from '@angular/core';\nclass TrCurrencyPipe {\n  transform(value, symbol = \"\", isCurrencyFront = false) {\n    if (value == 0) {\n      return \"0,00 \" + symbol;\n    }\n    let isValueNegative = false;\n    if (value < 0) {\n      isValueNegative = true;\n      value *= -1;\n    }\n    let money = value.toString().split(\".\");\n    let newMoney = \"\";\n    let lira = money[0];\n    let penny = \"00\";\n    if (money.length > 1) {\n      penny = money[1];\n      if (penny.length == 1) {\n        penny = penny + \"0\";\n      }\n      if (penny.length > 1) {\n        penny = this.convertNumber(+penny).toString();\n      }\n    }\n    let count = 0;\n    for (let i = lira.length; i > 0; i--) {\n      if (count == 3 && count < lira.length) {\n        newMoney = lira[i - 1] + \".\" + newMoney;\n        count = 1;\n      } else {\n        newMoney = lira[i - 1] + newMoney;\n        count++;\n      }\n    }\n    if (!isCurrencyFront) newMoney = `${newMoney},${penny} ${symbol}`;else newMoney = `${symbol}${newMoney},${penny}`;\n    if (isValueNegative) {\n      newMoney = \"-\" + newMoney;\n    }\n    return newMoney;\n  }\n  convertNumber(value) {\n    const stringValue = value.toString();\n    if (stringValue.length > 2) {\n      const remainingValue = parseInt(stringValue.substr(2));\n      if (remainingValue > 5) {\n        return parseInt(stringValue.substr(0, 2)) + 1;\n      }\n      return parseInt(stringValue.substr(0, 2));\n    }\n    return value;\n  }\n  static {\n    this.ɵfac = function TrCurrencyPipe_Factory(t) {\n      return new (t || TrCurrencyPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"trCurrency\",\n      type: TrCurrencyPipe,\n      pure: true,\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TrCurrencyPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'trCurrency',\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of my-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TrCurrencyPipe };\n"],
  "mappings": ";;;;;;;;AAEA,IAAM,kBAAN,MAAM,gBAAe;AAAA,EACnB,UAAU,OAAO,SAAS,IAAI,kBAAkB,OAAO;AACrD,QAAI,SAAS,GAAG;AACd,aAAO,UAAU;AAAA,IACnB;AACA,QAAI,kBAAkB;AACtB,QAAI,QAAQ,GAAG;AACb,wBAAkB;AAClB,eAAS;AAAA,IACX;AACA,QAAI,QAAQ,MAAM,SAAS,EAAE,MAAM,GAAG;AACtC,QAAI,WAAW;AACf,QAAI,OAAO,MAAM,CAAC;AAClB,QAAI,QAAQ;AACZ,QAAI,MAAM,SAAS,GAAG;AACpB,cAAQ,MAAM,CAAC;AACf,UAAI,MAAM,UAAU,GAAG;AACrB,gBAAQ,QAAQ;AAAA,MAClB;AACA,UAAI,MAAM,SAAS,GAAG;AACpB,gBAAQ,KAAK,cAAc,CAAC,KAAK,EAAE,SAAS;AAAA,MAC9C;AAAA,IACF;AACA,QAAI,QAAQ;AACZ,aAAS,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AACpC,UAAI,SAAS,KAAK,QAAQ,KAAK,QAAQ;AACrC,mBAAW,KAAK,IAAI,CAAC,IAAI,MAAM;AAC/B,gBAAQ;AAAA,MACV,OAAO;AACL,mBAAW,KAAK,IAAI,CAAC,IAAI;AACzB;AAAA,MACF;AAAA,IACF;AACA,QAAI,CAAC;AAAiB,iBAAW,GAAG,QAAQ,IAAI,KAAK,IAAI,MAAM;AAAA;AAAQ,iBAAW,GAAG,MAAM,GAAG,QAAQ,IAAI,KAAK;AAC/G,QAAI,iBAAiB;AACnB,iBAAW,MAAM;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc,OAAO;AACnB,UAAM,cAAc,MAAM,SAAS;AACnC,QAAI,YAAY,SAAS,GAAG;AAC1B,YAAM,iBAAiB,SAAS,YAAY,OAAO,CAAC,CAAC;AACrD,UAAI,iBAAiB,GAAG;AACtB,eAAO,SAAS,YAAY,OAAO,GAAG,CAAC,CAAC,IAAI;AAAA,MAC9C;AACA,aAAO,SAAS,YAAY,OAAO,GAAG,CAAC,CAAC;AAAA,IAC1C;AACA,WAAO;AAAA,EACT;AAcF;AAZI,gBAAK,OAAO,SAAS,uBAAuB,GAAG;AAC7C,SAAO,KAAK,KAAK,iBAAgB;AACnC;AAGA,gBAAK,QAA0B,aAAa;AAAA,EAC1C,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,YAAY;AACd,CAAC;AA7DL,IAAM,iBAAN;AAAA,CAgEC,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,gBAAgB,CAAC;AAAA,IACvF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,MAAM;AAAA,MACN,YAAY;AAAA,IACd,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;",
  "names": []
}
